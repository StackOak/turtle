{"archive":{"blogPosts":[{"id":"/2025/05/Map集合put方法返回值探究","metadata":{"permalink":"/xilio-doc/blog/2025/05/Map集合put方法返回值探究","source":"@site/blog/2025/05/Map集合put方法返回值探究.md","title":"Map集合put方法返回值探究","description":"遇到一个特别需要注意的Map集合使用问题，就是Map#put方法的返回值到底是什么，主要有以下几种情况：","date":"2025-05-24T00:00:00.000Z","tags":[{"inline":true,"label":"Java","permalink":"/xilio-doc/blog/tags/java"},{"inline":true,"label":"Map","permalink":"/xilio-doc/blog/tags/map"}],"readingTime":1.245,"hasTruncateMarker":false,"authors":[{"name":"xilio","title":"全栈开发工程师 @ xilio","url":"https://github.com/xilio1","page":{"permalink":"/xilio-doc/blog/authors/xilio"},"socials":{"x":"https://x.com/xilio1024","github":"https://github.com/xilio1","gitee":"https://gitee.com/xilio"},"imageURL":"https://foruda.gitee.com/avatar/1727861295948624568/5523591_xilio_1727861295.png!avatar200","key":"xilio"}],"frontMatter":{"title":"Map集合put方法返回值探究","date":"2025-05-24T00:00:00.000Z","authors":["xilio"],"tags":["Java","Map"]},"unlisted":false,"nextItem":{"title":"Lua常用语法","permalink":"/xilio-doc/blog/2025/05/Lua常用语法"}},"content":"遇到一个特别需要注意的Map集合使用问题，就是**Map#put**方法的返回值到底是什么，主要有以下几种情况：\n\n1、如果之前已经有对应的key，如果此时再放入一个相同key的值，此时是做更新覆盖操作，返回旧值\n2、如果之前没有对应的key，则执行添加操作，返回NULL\n\n```java\n    Map<String, Integer> cache = new HashMap<>();\n    Integer r1=cache.put(\"key1\",100); //返回NULL\n    Integer r2=cache.put(\"key1\",200); //返回100 覆盖\n\n```\n备注：规则适用于Map下的各种实现，例如**HashMap**、**ConcurrentHashMap**都有相同的规则。\n\n补充：如果需要实现如果已经有对应key存在的时候不做任何操作，可以使用框架提供的另一个方法**Map#putIfAbsent**，案例如下：\n```java\n    HashMap<Object, Object> map = new HashMap<>();\n    Object o = map.putIfAbsent(\"1\", \"2\");\n    System.out.println(o);//返回的是null\n    System.out.println(\"--\");\n    Object o1 = map.putIfAbsent(\"1\", \"3\");//key已经存在了，所以返回的是之前的值 不做任何操作\n    System.out.println(o1);//返回的是之前的值 o1=2\n\n```"},{"id":"/2025/05/Lua常用语法","metadata":{"permalink":"/xilio-doc/blog/2025/05/Lua常用语法","source":"@site/blog/2025/05/Lua常用语法.md","title":"Lua常用语法","description":"","date":"2025-05-23T11:32:49.581Z","tags":[{"inline":true,"label":"Lua","permalink":"/xilio-doc/blog/tags/lua"},{"inline":true,"label":"脚本语言","permalink":"/xilio-doc/blog/tags/脚本语言"}],"readingTime":0,"hasTruncateMarker":false,"authors":[{"name":"xilio","title":"全栈开发工程师 @ xilio","url":"https://github.com/xilio1","page":{"permalink":"/xilio-doc/blog/authors/xilio"},"socials":{"x":"https://x.com/xilio1024","github":"https://github.com/xilio1","gitee":"https://gitee.com/xilio"},"imageURL":"https://foruda.gitee.com/avatar/1727861295948624568/5523591_xilio_1727861295.png!avatar200","key":"xilio"}],"frontMatter":{"title":"Lua常用语法","authors":["xilio"],"tags":["Lua","脚本语言"]},"unlisted":false,"prevItem":{"title":"Map集合put方法返回值探究","permalink":"/xilio-doc/blog/2025/05/Map集合put方法返回值探究"},"nextItem":{"title":"JDK JMH基准测试","permalink":"/xilio-doc/blog/2025/05/JDK JMH基准测试"}},"content":""},{"id":"/2025/05/JDK JMH基准测试","metadata":{"permalink":"/xilio-doc/blog/2025/05/JDK JMH基准测试","source":"@site/blog/2025/05/JDK JMH基准测试.md","title":"JDK JMH基准测试","description":"介绍","date":"2025-05-21T02:30:11.339Z","tags":[{"inline":true,"label":"JDK","permalink":"/xilio-doc/blog/tags/jdk"},{"inline":true,"label":"基准测试","permalink":"/xilio-doc/blog/tags/基准测试"}],"readingTime":0.69,"hasTruncateMarker":false,"authors":[{"name":"xilio","title":"全栈开发工程师 @ xilio","url":"https://github.com/xilio1","page":{"permalink":"/xilio-doc/blog/authors/xilio"},"socials":{"x":"https://x.com/xilio1024","github":"https://github.com/xilio1","gitee":"https://gitee.com/xilio"},"imageURL":"https://foruda.gitee.com/avatar/1727861295948624568/5523591_xilio_1727861295.png!avatar200","key":"xilio"}],"frontMatter":{"title":"JDK JMH基准测试","authors":["xilio"],"tags":["JDK","基准测试"]},"unlisted":false,"prevItem":{"title":"Lua常用语法","permalink":"/xilio-doc/blog/2025/05/Lua常用语法"},"nextItem":{"title":"MySQL 性能优化实践","permalink":"/xilio-doc/blog/2025/05/MySQL 性能优化实践"}},"content":"## 介绍\n\n> 什么是【基准测试】？基准测试主要用于测试代码在JVM上的性能，例如比较不同算法的性能效率，执行时间，吞吐量，执行效率，多线程性能表现，垃圾回收等等\n\nJMH是openJdk自带的一款代码基准测试工具，具有很高的性能，完全隔离测试环境，使用简单，提供纳秒级别的测试精度，\n\n## 使用\n在SpringBoot项目中，通过引入下面的依赖即可继承\n\n```xml\n<dependency>\n    <groupId>org.openjdk.jmh</groupId>\n    <artifactId>jmh-core</artifactId>\n    <version>1.36</version>\n</dependency>\n```"},{"id":"/2025/05/MySQL 性能优化实践","metadata":{"permalink":"/xilio-doc/blog/2025/05/MySQL 性能优化实践","source":"@site/blog/2025/05/MySQL 性能优化实践.md","title":"MySQL 性能优化实践","description":"2025-05-19 MySQL 性能优化实践","date":"2025-05-19T03:12:24.479Z","tags":[{"inline":true,"label":"MySQL","permalink":"/xilio-doc/blog/tags/my-sql"},{"inline":true,"label":"SQL","permalink":"/xilio-doc/blog/tags/sql"},{"inline":true,"label":"性能优化","permalink":"/xilio-doc/blog/tags/性能优化"}],"readingTime":2.19,"hasTruncateMarker":false,"authors":[{"name":"xilio","title":"全栈开发工程师 @ xilio","url":"https://github.com/xilio1","page":{"permalink":"/xilio-doc/blog/authors/xilio"},"socials":{"x":"https://x.com/xilio1024","github":"https://github.com/xilio1","gitee":"https://gitee.com/xilio"},"imageURL":"https://foruda.gitee.com/avatar/1727861295948624568/5523591_xilio_1727861295.png!avatar200","key":"xilio"}],"frontMatter":{"title":"MySQL 性能优化实践","authors":["xilio"],"tags":["MySQL","SQL","性能优化"]},"unlisted":false,"prevItem":{"title":"JDK JMH基准测试","permalink":"/xilio-doc/blog/2025/05/JDK JMH基准测试"}},"content":"## 2025-05-19 MySQL 性能优化实践\n介绍一些常见的MySQL性能优化实践方法，优化和没有优化过的数据库性能具有天壤之别，特别是真实生产环境中，数据量特别大，动不动就是成千上万，如果不进行性能优化，那么用户体验将会极致拉低，开发中开发者首要做的优化就是查询优化，大部分场景都是读多写少。\n下面介绍几种不同维度的优化方法以及开发规范。\n\n## 索引优化\n- 尽量采用前缀索引\n- 采用覆盖索引\n- 不容易区分的列不要建立索引，也就是相同数据太多的列，例如性别、状态等字段\n\n## SQL查询优化\n- 避免使用OR，应该采用union代替，union all不过滤相同数据，union会过滤重复数据\n- 避免使用select(*)，需要什么字段就用什么字段，否则无法使用索引\n- 避免使用count(*),应该用count(id)\n- 避免在where条件中使用函数和计算 否则索引会失效\n- like模糊查询不要在前面加百分号，错误写法： “%key”，应该改为“key%”，否则索引会失效，效率大打折扣\n- 查询的时候不要用非类型的查询，例如!= 、NOT NULL\n- 查询条件的列视情况需要加索引\n## 开发规范\n- 不同的开发环境采用不同的数据库\n- 数据库和表命名采用小写，字符不要太长，可以采用缩写的方式解决\n## 数据类型优化\n- 不要在数据库中保存图片\n- 避免使用字符串类型ID作为主键\n- 字符集统一采用UTF-8"}]}}